  (--命令行要注意空格字符--) (--没有fatal错误就是操作成功--) (--个人感觉线上与本地仓库的更新都是以事情计算单位的--)（--某一边每次的更新执行操作都最好及时实时到另一边，别东改改西改改又不及时提交很容易出bug--）
 
 一. 本地仓库的常见操作（指令）

  a. 新建空目录 mkdir（可选操作）

  b. 进入当前新建的目录 cd /c/user/my_project

  c. Git仓库初始化（让Git知道他需要来管理这个目录）git init （表现出现.git隐藏目录）

  d. 常用指令：
  1. 查看当前状态 git status
  2. 添加到缓冲区 
  语法 ：(1)  git add   文件名
             (2)  git add   文件名1 文件名2 文件名3...
           （3 ) git add.   （添加 当前目录 到缓存区）
  3. 提交至版本库 git commit -m“注释内容”（--注释要写记录写好,以便好找历史--）

  e. 版本回退分为两个步骤：
  1. 查看版本 （1）git log 【这个详细点版本信息介绍】 （2）git log --pretty=oneline 【单行简略点】
  2. 回退操作  git reset --hard 提交编号 【commit id，就一大串数字的东东】
   
  ** 注意：回到过去的版本想要再回来最新的版本，则需要用指令去查看历史操作，以获得其编号。【不是git log指令】
  =>指令：git reflog

  ** 要点：无论是回到过去版本还是回到未来。得到commit id是关键（id就是版本编号，id可不写全，至少四位）--这也是本地仓库操作的作用【本地仓库的操作能更新文件的版本，方便查看历史记录文件】。

  二. 远程仓库的使用操作

  a. 基于http协议
  1.创建空目录（可选操作）,并进入

  2.使用clone指令克隆 【线上仓库 =>本地仓库】
  语法：git clone  线上仓库地址（即github仓库文件网站里Clone with HTTPS 里的网址）
  
  3.在仓库上做对应的操作（文件提交到暂存区，提交本地仓库，提交线上仓库，拉取线上仓库）【前两个是本地仓库操作都有的，后两个较本地仓库操作新增的操作】
    ①提交仓库文件，更新线上仓库 【本地仓库 => 线上仓库】：
    语法：git push
    (--【验证方式】刷新线上仓库浏览器地址,出现即为操作成功--)
   
    ②拉取线上仓库，更新本地文件 【线上仓库 => 本地仓库】：
    语法：git pull 【即线上仓库有修改可以更新到本地】
   
   ** 主要提醒：这两个操作循序渐进（一般都是必须先拉取线上仓库的更新内容）.比如在工作中，开始时可以使用git pull拉取最新的版本；结束时可以使用git push，将本地代码提交至线上仓库。

  b.  基于SSH协议（推荐这种）（--就是git clone后面的地址不同，其他操作都差不多--）
   【区别：只是身份的鉴权的方式不同】
   
  三.分支管理

  简介:
        在版本回退我们可以看到，每次提交都会有记录，Git会把他们串成时间线，形成类似于时间轴的东西，这个时间轴就是一个分支，我们称之为master分支。
        即在开发的时候都是团队协作完成，光有一个分支是无法满足多人同时开发的需求，并且在分支上工作并不影响其他分支的操作的正常使用，会更加安全，Git所以会鼓励开发者使用分支去完成一些开发任务。（类似的一个模块功能可以为一个分支。）
   
   分支相关的指令:
   1.查看分支： git branch  【是当前分支的话前面会有一个小梅花符号 *  】
   2.创建分支： git branch 分支名
   3.切换分支： git checkout 分支名 【对于新分支，可以使用 git checkout -b 分支名 指令来切换分支，-b选项表示创建并切换，相当于是两个指令操作（好像没啥用...不太懂啥意思）】
   
   4.删除分支： git branch -d 分支名 【** 注意：在删除分支时候，一定要先退出要删除的分支，当前就在要删除的分支上是无法删除的。】
   
   5.合并分支： git merge 被合并的分支名 【将目标分支合并到当前分支】
  
   (--操作测试：试试这句话仅在新建分支dev中可见，并与内容master分支合并,(即不在master分支时可见我)--)
    【步骤1.现在dev分支下的文件新增或其他改动,=> =>并提交到本地】
    【步骤2.切换到master分支下观察文件（成功表现：看不到新增或者改动）】
    【步骤3.将dev分支与master分支合并（成功表现：可以看到新增或者改动）】
    【** 注意：被合并的分支仍然存在，分支合并只是更新了内容，可选择删除被合并的分支。】【更新了内容不要忘记提交到线上哦。】

  四.使用过程中冲突的产生与解决

   1.案列：模拟冲突发生
   情况如下：
   步骤 ① 在线上仓库修改了代码（文件）
           ② 没有拉取新数据到本地 即git pull操作，而是直接再去修改本地对应文件的代码（此时数据肯定不同步的）
           ③ 在本地修改完了，我又跑去上传到线上仓库了（git push操作）

    ==>会出现的错误: 提示我们要在git push之前先git pull操作
    (图片1:记事本无法提供图片,观看请移步docx文档查看）

   【解决冲突】
   ④他提示我们先git pull，操作后：
   此时git已经将线上与本地仓库的冲突合并到了对应的文件。
   (图片2:记事本无法提供图片,观看请移步docx文档查看）
   
   ⑤打开冲突文件，解决冲突。
   解决方法：将需要的内容进行调整,保留需要的,删除不需要的便可。

   2.忽略文件
   场景：即有一些文件或者文件目录即便有改动，我们不想提交给远程仓库的文档，此时我们可以使用“忽略文件”机制来实现需求。
    
    操作步骤：需要创建一个.gitgnore的文件，该文件用于声明忽略文件或不忽略文件的规则，规则会对 当前目录及其子目录生效。
【**注意：不能直接在window目录下直接创建，要通过Git Bash命令行来touch创建】

  常见规则写法有如下几种：
  ① /mtk/    过滤整个文件夹    （mtk是文件夹的名称）
  ② *.zip      过滤所有.zip文件
  ③ /mtk/do.c   过滤某个具体的文件
  ④ ！index.js    不过滤具体某个文件

 案例：【必须在项目开始就创建.gitignore文件。】
步骤（1） 假设本地仓库有个需要更新的文件目录需要提交 （这个目录必须在放入缓冲区钱否则无法过滤）
        （2） 依次提交本地文件到线上
        （3） 命令行新增 .gitgnore文件（touch  .gitgnore）
        （4） 编写文件中的规则（根据需求编写）【文件里可以写注释：以#开头的都被认为是注释】
        （5） 再次提交本地目录到线上
   

  
    

    
    
    


  
  

  


