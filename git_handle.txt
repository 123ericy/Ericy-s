(--命令行要注意空格字符--)(--没有fatal错误就是操作成功--)
一. 本地仓库的常见操作（指令）

a. 新建空目录 mkdir（可选操作）

b. 进入当前新建的目录 cd /c/user/my_project

c. Git仓库初始化（让Git知道他需要来管理这个目录）git init （表现出现.git隐藏目录）

d. 常用指令：
  1. 查看当前状态 git status
  2. 添加到缓冲区 
语法（1）git add 文件名
      （2） git add 文件名1 文件名2 文件名3...
      （3） git add.   （添加 当前目录 到缓存区）
  3. 提交至版本库 git commit -m“注释内容”（注释要写记录以便好找历史）

e. 版本回退分为两个步骤：
   1. 查看版本 （1）git log 【这个详细点版本信息介绍】 （2）git log --pretty=oneline 【单行简略点】
   2. 回退操作  git reset --hard 提交编号 【commit id，就一大串数字的东东】
   
  ** 注意：回到过去的版本想要再回来最新的版本，则需要用指令去查看历史操作，以获得其编号。【不是git log指令】
  指令：git reflog

  ** 要点：无论是回到过去版本还是回到未来。得到commit id是关键（id就是版本编号，id可不写全，至少四位）--这也是本地仓库的特点和作用【本地仓库操作更新文件的版本，方便查看历史】。

二. 远程仓库的使用操作

a. 基于http协议
  1.创建空目录（可选操作）,并进入

  2.使用clone指令克隆 线上仓库 =>本地
  语法：git clone  线上仓库地址（即网站里Clone with HTTPS 里的网址）
  
3.在仓库上做对应的操作（提交暂存区，提交本地仓库，提交线上仓库，拉取线上仓库）【前两个本地仓库的操作，后两个较本地仓库操作新增的操作】
    提交到线上仓库【本地仓库 => 线上仓库】的操作指令：git push
    --【验证】刷新线上仓库浏览器地址--
   
   拉取线上仓库【线上仓库 => 本地仓】：git pull 【即线上有修改可以更新到本地】
   ** 主要提醒：这两件事情可以，比如在工作中，开始时可以使用git pull拉取最新的版本；结束时可以使用git push，将本地代码提交至线上仓库。

b.  基于SSH协议（推荐这种）（--就是git clone后面不同，其他操作都差不多--）
   【区别：只是身份的鉴权的方式不同】
   
三.分支管理

简介:
   在版本回退我们可以看到，每次提交都会有记录，Git会把他们串成时间线，形成类似于时间轴的东西，这个时间轴就是一个分支，我们称之为master分支。即在开发的时候都是团队协作完成，光有一个分支是无法满足多人同时开发的需求，并且在分支上工作并不影响其他分支的操作的正常使用，会更加安全，Git所以会鼓励开发者使用分支去完成一些开发任务。（类似于一个模块功能可以为一个分支。）
   
   分支相关的指令:
   1.查看分支： git branch  【是当前分支的话会有一个小梅花符号 *  】
   2.创建分支： git branch 分支名
   3.切换分支： git checkout 分支名 【对于 新分支，可以使用 git checkout -b 分支名 指令来切换分支，-b选项表示创建并切换，相当于是两个指令操作】
   
    4.删除分支： git branch -d 分支名 【** 注意：在删除分支时候，一定要先退出要删除的分支，当前就在要删除的分支上是无法删除的。】
   
    5.合并分支： git merge 被合并的分支名（将目标分支合并到当前分支）
   (--操作测试：试试这句话仅在新建分支dev中可见，并与内容master分支合并,不在master分支时可见我--)
    【步骤1.现在dev分支下的文件新增或其他改动,=> =>并提交到本地】
    【步骤2.切换到master分支下观察文件（成功表现：看不到新增或者改动）】
    【步骤3.讲dev分支与master分支合并（成功表现：可以看到新增或者改动）
     ** 注意：原来分支仍然存在，分支合并只是更新了内容】
     
     （--我加了这句话为了查看，不做本地拉取更新git pull， 并再在本地修改会发生什么--）
   
 
  
  

  


